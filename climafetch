#!/bin/bash
# Climafetch (based off weather_cli) Version 0.2.0 by AptGetMe 2025
#
# Weather icons inspired by weather underground:  https://www.wunderground.com/
# Ascii art provide by free website:  https://www.asciiart.eu/image-to-ascii

# define version
_version="0.3.0"

# global flag for daytime or nighttime
_dayTime=true

# define global colors
_yellow_BOLD_FG="\033[1;38;5;226m"
_orange_BOLD_FG="\033[1;38;5;214m"
_grey_BOLD_FG="\033[1;38;5;248m"
_white_BOLD_FG="\033[1;38;5;255m"
_green_BOLD_FG="\033[1;38;5;42m"
_azure_BOLD_FG="\033[1;38;5;26m"
_blue_BOLD_FG="\033[1;38;5;51m"

_sky1_BG="\033[48;5;105m"
_sky2_BG="\033[48;5;69m"
_sky3_BG="\033[48;5;33m"
_sky4_BG="\033[48;5;21m"

_colorEnd="\033[m"

# global array to hold weather conditions
_out=()

# global array to hold weather ASCII icons
_icon=()

# global array to hold raw json weather data
_json=""

# GPS coords for Toledo Ohio US (41.65° N and -83.54° W) default location
_toledo="41.65 -83.54"

# climate data variables
_temperature=""
_conditions=""
_weatherCode=""
_wind=""
_windSpeed=""
_windDirection=""
_cloudCover=""
_rain=""
_humidity=""
_pressure=""
_elevation=""
_locale=""
_timezone=""
_timezoneCode=""
_isoDate=""
_currentTime=""
_observationTime=""
_observationInterval=""
_sunrise=""
_isoSunrise=""
_sunset=""
_isoSunset=""

# function that will decode the WCO weather code to text conditions description
# full list of wco codes that OpenMetro uses:  https://open-meteo.com/en/docs#weather_variable_documentation
# more should be added here...
function decodeWCO()
{
    case "${1}" in
        "0") echo "Clear sky" ;;
        "1") echo "Mainly clear";;
        "2") echo "Partly cloudy" ;;
        "3") echo "Overcast" ;;
        *) echo "unknown WCO code..."
    esac
}

# function to return the compass cardinal value from degrees (digit only)
function decodeCompass()
{
    # remove degrees units if present and leave only number
    _degree=$(echo $1 | tr -dc '0-9')

    if (($_degree <= 11)) ; then echo "N"
    elif (($_degree <= 33)) ; then echo "NNE"
    elif (($_degree <= 56)) ; then echo "NE"
    elif (($_degree <= 78)) ; then echo "ENE"
    elif (($_degree <= 101)) ; then echo "E"
    elif (($_degree <= 123)) ; then echo "ESE"
    elif (($_degree <= 146)) ; then echo "SE"
    elif (($_degree <= 168)) ; then echo "SSE"
    elif (($_degree <= 191)) ; then echo "S"
    elif (($_degree <= 213)) ; then echo "SSW"
    elif (($_degree <= 236)) ; then echo "SW"
    elif (($_degree <= 258)) ; then echo "WSW"
    elif (($_degree <= 281)) ; then echo "W"
    elif (($_degree <= 303)) ; then echo "WNW"
    elif (($_degree <= 326)) ; then echo "NW"
    elif (($_degree <= 348)) ; then echo "NNW"
    elif (($_degree <= 360)) ; then echo "N"
    else echo "($_degree) bad compass degrees..."
    fi
}

# function that will play a ASCII animation until timeout or told to exit via kill
# run in background
function timer()
{
    _timeout=${1:-100}
    _style=${2:-0}
    echo $_style
    case "$_style" in
        1)
            _spinner=$(echo -e '\U2600\UFE0F \U2600\UFE0F \U2600\UFE0F \U1F324\UFE0F \U26C5\UFE0F\UFE0F'`
                    `'\U1F325\UFE0F \U2601\UFE0F \U1F327\UFE0F \U1F328\UFE0F \U1F327\UFE0F '`
                    `'\U1F328\UFE0F \U1F327\UFE0F \U1F328\UFE0F \U1F329\UFE0F \U1F328\UFE0F '`
                    `'\U1F327\UFE0F \U1F328\UFE0F \U2601\UFE0F \U1F325\UFE0F \U26C5\UFE0F\UFE0F'`
                    `'\U1F324\UFE0F \U2600\UFE0F \U2600\UFE0F ')
            _length=69
            _chunkWidth=3
        ;;
        0) ;& *)
            _spinner='-       \       |       /       '`
                    `'*-      *\      *|      */      '`
                    `'**-     **\     **|     **/     '`
                    `'***-    ***\    ***|    ***/    '`
                    `'****-   ****\   ****|   ****/   '`
                    `'*****-  *****\  *****|  *****/  '`
                    `'******- ******\ ******| ******/ '`
                    `'*******-*******\*******|*******/'
            _length=256
            _chunkWidth=8
        ;;
    esac

    for i in $(seq 0 $_chunkWidth $(( _timeout * _chunkWidth )))
    do
        _offset=$(( i % $_length ))
        tput cr
        echo -en "[${_spinner:_offset:_chunkWidth}]"
        sleep 0.1
    done
}
# function that will insert ANSI color codes into array of strings
# _test=("hello world,S E,\033[1;38;5;226m \033[m"
#       "good grief,5 7 9,\033[1;38;5;42m \033[1;38;5;51m \033[m")
# colorizeArray _test
# will change each element of _test array from the string with color data
# into the same string with color data inserted
function colorizeArray()
{
    local -n _data=$1
    for _i in "${!_data[@]}"
    do
        _data[$_i]=$(colorizeLine "${_data[$_i]}")
    done
}

# function that will insert ANSI color codes into string
# example
# _test=$(colorizeLine "hello world,S 3 7,\033[1;38;5;226m \033[1;38;5;255m \033[m")
# will put into $_test var the string "hello world" with "hel" as bold yellow foreground
# and "lo w" as bold white foreground
function colorizeLine()
{
    # read in data string, split by string, position, and color info
    IFS=',' read -ra _colorData <<< "$1"
    _input="${_colorData[0]}"
    read -ra _pos <<< "${_colorData[1]}"
    read -ra _data <<< "${_colorData[2]}"

    # offset keeps track of string growth as new color codes are inserted
    _offset=0

    # go through each position and insert corresponding color code into _input
    # at that location
    for _i in "${!_pos[@]}"
    do
        case "${_pos[$_i]}" in
            "S")
                _input="${_data[$_i]}${_input}"
                ((_offset+=${#_data[$_i]}))
            ;;
            "E")
                _input="${_input}${_data[$_i]}"
            ;;
            *)
                _index=$((_pos[$_i] + _offset))
                _input="${_input:0:_index}${_data[$_i]}${_input:_index}"
                ((_offset+=${#_data[$_i]}))
        esac
    done

    #return finished string with color codes
    echo -e "$_input"
}

# fetches the weather json file from OpenMetro.com api
# make sure to pass in location "latitude longitude"
# example
# getData "41.65 -83.54"
# will return the weather data from Toledo Ohio (41.65° N and -83.54° W)
function getData()
{
    # get latitude and longitude from first argument
    read -r _lat _long <<< "$1"

    # build api call to OpenMetro.com
    _api=("latitude=$_lat"
        "longitude=$_long"
        "daily=sunrise,sunset"
        "current=temperature_2m,weather_code,,wind_speed_10m,wind_direction_10m,cloud_cover,relative_humidity_2m,surface_pressure,rain"
        "timezone=auto"
        "wind_speed_unit=mph"
        "temperature_unit=fahrenheit"
        "precipitation_unit=inch")

    # build url by adding '&' between API elements and removing duplicate ','
    _url="https://api.open-meteo.com/v1/forecast?$(IFS='&' ; echo "${_api[*]}" | tr -s ',')"
    # echo "$_url"

    # call api and save json
    _json=$(wget -O- "$_url")
    # echo "$_json" | jq '.'
}

# populates the climate data variables based on data in json
function parseData()
{
    # get temperature and weather conditions
    _temperature=$(echo "$_json" | jq -r '"\(.current.temperature_2m) \(.current_units.temperature_2m)"')
    _weatherCode=$(echo "$_json" | jq -r '"\(.current_units.weather_code) \(.current.weather_code)"')

    # call function to get text description from WCO code
    _conditions=$(decodeWCO "${_weatherCode##* }")

    # get wind speed, remove unnecessary '/', wind direction and combine into the one wind variable
    _windSpeed=$(echo "$_json" | jq -r '"\(.current.wind_speed_10m) \(.current_units.wind_speed_10m)"' | tr -d '/')
    _windDirection=$(echo "$_json" | jq -r '"\(.current.wind_direction_10m)\(.current_units.wind_direction_10m)"')
    _windDirection=$(decodeCompass $_windDirection)
    _wind="$_windSpeed from $_windDirection"

    # get cloud cover and rain only if > 0 inches
    _cloudCover=$(echo "$_json" | jq -r '"\(.current.cloud_cover)\(.current_units.cloud_cover)"')
    if $(echo "$_json" | jq -e '.current.rain != 0') > /dev/null ; then
        _rain=$(echo "$_json" | jq -r '"\(.current.rain) \(.current_units.rain)"')
    fi

    # get humidity, pressure with conversion to inHg with 2 decimal points of precision, and elevation
    _humidity=$(echo "$_json" | jq -r '"\(.current.relative_humidity_2m)\(.current_units.relative_humidity_2m)"')
    _pressure=$(echo "$_json" | jq -r '"\(.current.surface_pressure) \(.current_units.surface_pressure)"')
    _pressure="$(echo "${_pressure%% *} * 0.02953" | bc | xargs printf "%.2f") inHg"
    _elevation="$(echo "$_json" | jq -r '.elevation') meters"

    # get locale and timezone data.  round to 2 decimal places
    _locale="$(echo "$_json" | jq -r '.latitude' | xargs printf "%.2f")° $(echo "$_json" | jq -r '.longitude' | xargs printf "%.2f")°"
    _timezone=$(echo "$_json" | jq -r '.timezone')
    _timezoneCode=$(echo "$_json" | jq -r '.timezone_abbreviation')

    # get current time at current location, observation time at weather location and measurement intervals
    _currentTime=$(date +"%a, %d %b %Y, %I:%M:%S %p, %Z")
    _isoDate=$(echo "$_json" | jq -r '"\(.current.time) \(.current_units.time)"')
    _observationTime=$(TZ=$_timezone date -d "${_isoDate%% *}" +"%a, %d %b %Y, %I:%M:%S %p, %Z")
    _observationInterval=$(echo "$_json" | jq -r '"\(.current.interval) \(.current_units.interval)"')
    _observationInterval="$(date -d@${_observationInterval%% *} -u +%M) minutes"

    # get sunrise and sunset times at weather observation location
    _isoSunrise=$(echo "$_json" | jq -r '"\(.daily.sunrise[0]) \(.daily_units.sunrise)"')
    _sunrise=$(TZ=$_timezone date -d "${_isoSunrise%% *}" +"%I:%M:%S %p, %Z")
    _isoSunset=$(echo "$_json" | jq -r '"\(.daily.sunset[0]) \(.daily_units.sunset)"')
    _sunset=$(TZ=$_timezone date -d "${_isoSunset%% *}" +"%I:%M:%S %p, %Z")

    # echo "$_temperature,$_conditions,$_weatherCode,$_wind,$_cloudCover,$_rain,"\
    #      "$_humidity,$_pressure,$_elevation,$_locale,$_timezone,$_timezoneCode,$_currentTime,"\
    #      "$_observationTime,$_observationInterval,$_sunrise,$_sunset"
}

# sunny skies less than 10% cloud cover
function clear()
{
    if [ $_dayTime = 'true' ]; then
    _icon=("               *               ,S E,$_yellow_BOLD_FG $_colorEnd"
          "              ***              ,S E,$_yellow_BOLD_FG $_colorEnd"
          "       ***   *****   ***       ,S E,$_yellow_BOLD_FG $_colorEnd"
          "        ***************        ,S E,$_yellow_BOLD_FG $_colorEnd"
          "        ***  -=-=-  ***        ,S 11 18 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  ******* -=-=-=-=-=- *******  ,S 9 21 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "     **** =-=-=-=-=-=-- ****   ,S 9 23 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "        * =-=-=-=-=-=-= *      ,S 9 23 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "     **** =-=-=-=-=-=-- ****   ,S 9 23 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  ******* -=-=-=-=-=- *******  ,S 9 21 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "        ***  =-=-=  ***        ,S 11 18 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "        ***************        ,S E,$_yellow_BOLD_FG $_colorEnd"
          "       ***   *****   ***       ,S E,$_yellow_BOLD_FG $_colorEnd"
          "              ***              ,S E,$_yellow_BOLD_FG $_colorEnd"
          "               *               ,S E,$_yellow_BOLD_FG $_colorEnd")
    else
    _icon=("           x                   ,S E,$_azure_BOLD_FG $_colorEnd"
          "       xxxxx                   ,S E,$_azure_BOLD_FG $_colorEnd"
          "     xx;;:xx                   ,S 7 10 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "    x;:;:;;x                   ,S 5 11 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "   x;:;:;:;x                   ,S 4 11 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  x;:;:;:;:;x                  ,S 3 12 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  x;:;:;:;:;:x                 ,S 3 13 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  x;:;:;:;:;;:xx               ,S 3 14 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  x;:;:;:;:;:;;:xx             ,S 3 16 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  xx;:;:;:;:;:;:;:;xxxx     x  ,S 4 19 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "   x;:;:;:;:;:;:;:;:;;:;:;:xx  ,S 4 27 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "    xx;:;:;:;:;:;:;:;:;:;:x.   ,S 6 26 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "      xx;:;:;:;:;:;:;:;:xx     ,S 8 24 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "        xxx;:;:;:;:;:xxx       ,S 11 21 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "            +xxxxxx            ,S E,$_azure_BOLD_FG $_colorEnd")
    fi
}

# between 10% and 40% cloud cover
function mostlyClear()
{
    if [ $_dayTime = 'true' ]; then
    _icon=("               *               ,S E,$_yellow_BOLD_FG $_colorEnd"
          "              ***              ,S E,$_yellow_BOLD_FG $_colorEnd"
          "       ***   *****   ***       ,S E,$_yellow_BOLD_FG $_colorEnd"
          "        ***************        ,S E,$_yellow_BOLD_FG $_colorEnd"
          "        ***  -=-=-  ***        ,S 11 18 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  *******  =-=-=-=-=- *******  ,S 9 21 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "     ***  -=-=-=-=-=-= ****    ,S 8 22 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "       * =-=-=-=-=-=-= *       ,S 8 22 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "     ***  =-=-=-=-=-=- ****    ,S 8 22 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  ***  ====  =-=-=-=- *******  ,S 5 11 21 E,$_yellow_BOLD_FG $_grey_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "     =::::::===  =  ***        ,S 6 12 15 18 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "    =:.:.:.:.:.:=  ****        ,S 5 16 17 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  =::.:.:.:.:.:.:=    **       ,S 3 17 18 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  =:.:.:.:.:::.:==             ,S 3 16 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "   =============               ,S E,$_grey_BOLD_FG $_colorEnd")
    else
    _icon=("            +                  ,S E,$_azure_BOLD_FG $_colorEnd"
          "         xx;x                  ,S 11 12 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "       x+;;:x                  ,S 9 12 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "     xx;;:;;x                  ,S 7 12 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "    .x;:;;:;xx                 ,S 6 12 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "    x;;;:;;;;xx                ,S 5 13 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "    x;:;;:;:;;xx               ,S 5 14 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "    x;;:;;:;:;;;xx             ,S 5 16 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "    x;:;:.;;;:;:;;;xx          ,S 5 19 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "      ======= ;;:;;;;;;;xxxxx  ,S 13 24 E,$_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "     =:.:.:.:====  :;:;:;;xx   ,S 6 13 18 26 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "   ==.:.:.:..:.:.== ;;:;;x     ,S 5 17 19 25 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  =:.:.:.:.:.:.:.:= ;xxx       ,S 3 18 19 21 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  =.:.:.:.:.:.:.:==            ,S 3 17 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "    ============               ,S E,$_grey_BOLD_FG $_colorEnd")
    fi
}

# between 40% and 70% cloud cover
function partlyCloudy()
{
    if [ $_dayTime = 'true' ]; then
    _icon=("               *               ,S E,$_yellow_BOLD_FG $_colorEnd"
          "              ***              ,S E,$_yellow_BOLD_FG $_colorEnd"
          "       ***   *****   ***       ,S E,$_yellow_BOLD_FG $_colorEnd"
          "        ***************        ,S E,$_yellow_BOLD_FG $_colorEnd"
          "        ***  -=-=-  ***        ,S 11 18 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "       ==== -=-=-=-=- *******  ,S 11 21 E,$_grey_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "     ==::::::=== -=-=- ****    ,S 7 13 16 22 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "   ==:.:.:.:.:: = --=- *       ,S 5 15 17 22 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  =:.::.:.:.: ==:::== *****    ,S 3 13 16 19 21 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  =:.:. =====.::.:.::==  ****  ,S 3 7 13 21 23 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "      ==-::.::.::.:.::====     ,S 8 22 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "    =.:.:.:.:.:.:.::.:.:::=    ,S 5 26 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "    =:.:.:.:.:.:.:.::.:.::==   ,S 5 26 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "    =::.:.:.:.:.:.:.:.::.:=    ,S 5 26 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "      ===================      ,S 5 26 E,$_colorEnd")
    else
    _icon=("                x              ,S E,$_azure_BOLD_FG $_colorEnd"
          "             xx;x              ,S 15 16 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "           :x;;:x              ,S 13 16 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "          .x;:;;x+             ,S 12 16 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "          x;;;:;;x             ,S 11 17 E,$_azure_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "       :===  :;:;;xx           ,S 11 18 E,$_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "     ==:.:.:== ;;:;;;xx        ,S 7 12 14 21 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "    =..:.:.:.:.:= ;:;;;;;;++x  ,S 5 16 17 26 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  =::.:.:.:.  :===  ;:;:;:xx   ,S 3 12 18 26 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "  =.:.:  ====:.:.:.== ;xxx     ,S 3 7 13 19 21 23 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_blue_BOLD_FG $_azure_BOLD_FG $_colorEnd"
          "   ==  ==:.:..:.:.:.===        ,S 9 20 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "    ==:.:.:.:.:.:.:.:.:.=      ,S 6 24 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "   ==.:..:.:.:.:.:.:.:.:==     ,S 5 24 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "    =:.:.:..:.:.:.:.:.:.=      ,S 5 24 E,$_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "      =================        ,S E,$_grey_BOLD_FG $_colorEnd")
    fi
}

# greater than 70% cloud cover
function cloudy()
{
    _icon=("              ==::==           ,S 16 18 E, $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "         =====:.:.:.:==        ,S 14 21 E, $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "       =:.:.:.:.:.:.:.==       ,S 8 22 E, $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "    ====.:.:.:.:.:.:.:.:.:==   ,S 8 26 E, $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "  ==:.:.:.:.:.:.:.:.:.:.:.:.=  ,S 4 28 E, $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "  =.:.:.:.:..:.:.:.:.:.:.:.:=  ,S 3 28 E, $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "  =:.:.:.:.:.:.:.:.:.:.:.:.==  ,S 3 27 E, $_grey_BOLD_FG $_white_BOLD_FG $_grey_BOLD_FG $_colorEnd"
          "   ========================    ,S E, $_grey_BOLD_FG $_colorEnd"
          "                               "
          "                               "
          "                               "
          "                               "
          "                               "
          "                               "
          "                               ")
}

## SCRIPT ENTRYPOINT:
while getopts 'vh' _opt;
do
    case "$_opt" in
        v)
            _logo=( "           ;;;;;;;;    ..     ..   "
                    "         ;;........;;  ..   ..     "
                    "        ;;..........:; .. ..       "
                    "    ;;;;;;:..........;    ..:.:..: "
                    "  ;;.......;:.......;;;;;;         "
                    " ;;................;;.....:;;      "
                    " ;:.........................:;     "
                    " :;.........................:;     "
                    "   ;;:...................:;;;      "
                    "   ++       -+      ++             "
                    "  ++       -+      ++              ")
            echo ""
            _appInfo=$(figlet -f slant "Climafetch Version $_version")
            paste <(printf "%s\n" "${_logo[@]}") <(printf "$_appInfo") | lolcat
            exit
            ;;
        h)
            ;&
        *)
            echo -en "$_green_BOLD_FG"
            figlet -c "Climafetch $_version help page"
            echo -e "climafetch $_azure_BOLD_FG[-v]$_colorEnd $_orange_BOLD_FG[-h]$_colorEnd"
            echo -e "  $_azure_BOLD_FG [-v]$_colorEnd show version"
            echo -e "  $_orange_BOLD_FG [-h]$_colorEnd show this help page"
            echo -e "$_green_BOLD_FG"
            echo -e "example:$_colorEnd  get current climate conditions"
            echo -e "climafetch"
            exit
    esac
done

# get current date with "date" cmd and store in variable
_date=$(date '+%m/%d/%Y')

# get desired location for weather report if none are provided, use default of Toledo Ohio
_gpsCoords=${1:-$_toledo}

# get climate at gps location (or uncomment second line for local test data)
getData "$_gpsCoords"
#_json=$(jq '.' "$(dirname "$0")/TestApiData.json")

# parse the json weather data into the climate data variables
parseData

# determine if it is daytime or nighttime based on returned sunrise and sunset times
if [ "$(date -d "${_isoDate%% *}" +%s)" -ge "$(date -d "${_isoSunrise%% *}" +%s)" ] && [ "$(date -d "${_isoDate%% *}" +%s)" -le "$(date -d "${_isoSunset%% *}" +%s)" ]; then
    _dayTime=true
else
    _dayTime=false
fi

# basic logic to pick correct weather icon image from the current weather conditions
case $_conditions in
    "Clear sky")
        clear
    ;;
    "Mainly clear")
        mostlyClear
    ;;
    "Partly cloudy")
        partlyCloudy
    ;;
    "Overcast")
        cloudy
    ;;
esac

# colorize raw icon string data
colorizeArray _icon

# populate final climate status
_out+=("${_green_BOLD_FG}Weather:$_colorEnd  Report for $_date")
_out+=("----------------")
_out+=("${_green_BOLD_FG}temperature:$_colorEnd  $_temperature")
_out+=("${_green_BOLD_FG}conditions:$_colorEnd  $_conditions")
_out+=("${_green_BOLD_FG}wind:$_colorEnd  $_wind")
_out+=("${_green_BOLD_FG}cloud cover:$_colorEnd  $_cloudCover")
_out+=("${_green_BOLD_FG}humidity:$_colorEnd  $_humidity")
_out+=("${_green_BOLD_FG}pressure:$_colorEnd  $_pressure")
_out+=("${_green_BOLD_FG}locale:$_colorEnd  $_locale")
_out+=("${_green_BOLD_FG}timezone:$_colorEnd  $_timezone")
_out+=("${_green_BOLD_FG}current time:$_colorEnd  $_currentTime")
_out+=("${_green_BOLD_FG}observation time:$_colorEnd  $_observationTime")
_out+=("${_green_BOLD_FG}sunrise:$_colorEnd  $_sunrise")
_out+=("${_green_BOLD_FG}sunset:$_colorEnd  $_sunset")
_out+=("${_green_BOLD_FG}source:$_colorEnd  OpenMetro")

# print out the final results
paste -d '\t\t' <(printf "%b\n" "${_icon[@]}") <(printf "%b\n" "${_out[@]}")
