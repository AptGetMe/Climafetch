#!/bin/bash
# Climafetch (based off weather_cli) Version 0.2.0 by AptGetMe 2025
#
# Weather icons inspired by weather underground:  https://www.wunderground.com/
# Ascii art provide by free website:  https://www.asciiart.eu/image-to-ascii

# define version
_version="0.2.0"

# global flag for daytime or nighttime
_dayTime=true

# define global colors
_yellow_BOLD_FG="\033[1;38;5;226m"
_orange_BOLD_FG="\033[1;38;5;214m"
_grey_BOLD_FG="\033[1;38;5;248m"
_white_BOLD_FG="\033[1;38;5;255m"
_green_BOLD_FG="\033[1;38;5;42m"
_azure_BOLD_FG="\033[1;38;5;26m"
_blue_BOLD_FG="\033[1;38;5;51m"

_sky1_BG="\033[48;5;105m"
_sky2_BG="\033[48;5;69m"
_sky3_BG="\033[48;5;33m"
_sky4_BG="\033[48;5;21m"

_colorEnd="\033[m"

# global array to hold final output to screen
_out=()

# function that will insert ANSI color codes into array of strings
# _test=("hello world,S E,\033[1;38;5;226m \033[m"
#       "good grief,5 7 9,\033[1;38;5;42m \033[1;38;5;51m \033[m")
# colorizeArray _test
# will change each element of _test array from the string with color data
# into the same string with color data inserted
function colorizeArray()
{
    local -n _data=$1
    for _i in "${!_data[@]}"
    do
        _data[$_i]=$(colorizeLine "${_data[$_i]}")
    done
}

# function that will insert ANSI color codes into string
# example
# _test=$(colorizeLine "hello world,S 3 7,\033[1;38;5;226m \033[1;38;5;255m \033[m")
# will put into $_test var the string "hello world" with "hel" as bold yellow foreground
# and "lo w" as bold white foreground
function colorizeLine()
{
    # read in data string, split by string, position, and color info
    IFS=',' read -ra _colorData <<< "$1"
    _input="${_colorData[0]}"
    read -ra _pos <<< "${_colorData[1]}"
    read -ra _data <<< "${_colorData[2]}"

    # offset keeps track of string growth as new color codes are inserted
    _offset=0

    # go through each position and insert corresponding color code into _input
    # at that location
    for _i in "${!_pos[@]}"
    do
        case "${_pos[$_i]}" in
            "S")
                _input="${_data[$_i]}${_input}"
                ((_offset+=${#_data[$_i]}))
            ;;
            "E")
                _input="${_input}${_data[$_i]}"
            ;;
            *)
                _index=$((_pos[$_i] + _offset))
                _input="${_input:0:_index}${_data[$_i]}${_input:_index}"
                ((_offset+=${#_data[$_i]}))
        esac
    done

    #return finished string with color codes
    echo -e "$_input"
}

# sunny skies less than 10% cloud cover
function clear()
{
    if [ $_dayTime = 'true' ]; then
    _out=("               *               ,S E,$_yellow_BOLD_FG $_colorEnd"
          "              ***              ,S E,$_yellow_BOLD_FG $_colorEnd"
          "       ***   *****   ***       ,S E,$_yellow_BOLD_FG $_colorEnd"
          "        ***************        ,S E,$_yellow_BOLD_FG $_colorEnd"
          "        ***  -=-=-  ***        ,S 11 18 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  ******* -=-=-=-=-=- *******  ,S 9 21 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "     **** =-=-=-=-=-=-- ****   ,S 9 23 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "        * =-=-=-=-=-=-= *      ,S 9 23 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "     **** =-=-=-=-=-=-- ****   ,S 9 23 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "  ******* -=-=-=-=-=- *******  ,S 9 21 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "        ***  =-=-=  ***        ,S 11 18 E,$_yellow_BOLD_FG $_orange_BOLD_FG $_yellow_BOLD_FG $_colorEnd"
          "        ***************        ,S E,$_yellow_BOLD_FG $_colorEnd"
          "       ***   *****   ***       ,S E,$_yellow_BOLD_FG $_colorEnd"
          "              ***              ,S E,$_yellow_BOLD_FG $_colorEnd"
          "               *               ,S E,$_yellow_BOLD_FG $_colorEnd")
    else
    _out=("$_azure_BOLD_FG           x                   $_colorEnd"
          "$_azure_BOLD_FG       xxxxx                   $_colorEnd"
          "$_azure_BOLD_FG     xx$_blue_BOLD_FG;;:${_azure_BOLD_FG}xx                   $_colorEnd"
          "$_azure_BOLD_FG    x$_blue_BOLD_FG;:;:;;${_azure_BOLD_FG}x                   $_colorEnd"
          "$_azure_BOLD_FG   x$_blue_BOLD_FG;:;:;:;${_azure_BOLD_FG}x                   $_colorEnd"
          "$_azure_BOLD_FG  x$_blue_BOLD_FG;:;:;:;:;${_azure_BOLD_FG}x                  $_colorEnd"
          "$_azure_BOLD_FG  x$_blue_BOLD_FG;:;:;:;:;:${_azure_BOLD_FG}x                 $_colorEnd"
          "$_azure_BOLD_FG  x$_blue_BOLD_FG;:;:;:;:;;:${_azure_BOLD_FG}xx               $_colorEnd"
          "$_azure_BOLD_FG  x$_blue_BOLD_FG;:;:;:;:;:;;:${_azure_BOLD_FG}xx             $_colorEnd"
          "$_azure_BOLD_FG  xx$_blue_BOLD_FG;:;:;:;:;:;:;:;${_azure_BOLD_FG}xxxx     x  $_colorEnd"
          "$_azure_BOLD_FG   x$_blue_BOLD_FG;:;:;:;:;:;:;:;:;;:;:;:${_azure_BOLD_FG}xx  $_colorEnd"
          "$_azure_BOLD_FG    xx$_blue_BOLD_FG;:;:;:;:;:;:;:;:;:;:${_azure_BOLD_FG}x.   $_colorEnd"
          "$_azure_BOLD_FG      xx$_blue_BOLD_FG;:;:;:;:;:;:;:;:${_azure_BOLD_FG}xx     $_colorEnd"
          "$_azure_BOLD_FG        xxx$_blue_BOLD_FG;:;:;:;:;:${_azure_BOLD_FG}xxx       $_colorEnd"
          "$_azure_BOLD_FG            +xxxxxx            $_colorEnd")
    fi
}

# between 10% and 40% cloud cover
function partlyCloudy()
{
    if [ $_dayTime = 'true' ]; then
    _out=("$_yellow_BOLD_FG               *               $_colorEnd"
          "$_yellow_BOLD_FG              ***              $_colorEnd"
          "$_yellow_BOLD_FG       ***   *****   ***       $_colorEnd"
          "$_yellow_BOLD_FG        ***************        $_colorEnd"
          "$_yellow_BOLD_FG        ***$_orange_BOLD_FG  -=-=-$_yellow_BOLD_FG  ***        $_colorEnd"
          "$_yellow_BOLD_FG  *******$_orange_BOLD_FG  =-=-=-=-=-$_yellow_BOLD_FG *******  $_colorEnd"
          "$_yellow_BOLD_FG     ***$_orange_BOLD_FG  -=-=-=-=-=-=$_yellow_BOLD_FG ****    $_colorEnd"
          "$_yellow_BOLD_FG       *$_orange_BOLD_FG =-=-=-=-=-=-=$_yellow_BOLD_FG *       $_colorEnd"
          "$_yellow_BOLD_FG     ***$_orange_BOLD_FG  =-=-=-=-=-=-$_yellow_BOLD_FG ****    $_colorEnd"
          "$_yellow_BOLD_FG  ***$_grey_BOLD_FG  ====$_orange_BOLD_FG  =-=-=-=-$_yellow_BOLD_FG *******  $_colorEnd"
          "$_grey_BOLD_FG     =$_white_BOLD_FG::::::$_grey_BOLD_FG===$_orange_BOLD_FG  =$_yellow_BOLD_FG  ***        $_colorEnd"
          "$_grey_BOLD_FG    =$_white_BOLD_FG:.:.:.:.:.:$_grey_BOLD_FG==$_yellow_BOLD_FG ****        $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG::.:.:.:.:.:.:$_grey_BOLD_FG=$_yellow_BOLD_FG    **       $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG:.:.:.:.:::.:$_grey_BOLD_FG==             $_colorEnd"
          "$_grey_BOLD_FG   =============               $_colorEnd")
    else
    _out=("$_azure_BOLD_FG            +                  $_colorEnd"
          "$_azure_BOLD_FG         xx$_blue_BOLD_FG;${_azure_BOLD_FG}x                  $_colorEnd"
          "$_azure_BOLD_FG       x+$_blue_BOLD_FG;;:${_azure_BOLD_FG}x                  $_colorEnd"
          "$_azure_BOLD_FG     xx$_blue_BOLD_FG;;:;;${_azure_BOLD_FG}x                  $_colorEnd"
          "$_azure_BOLD_FG    .x$_blue_BOLD_FG;:;;:;${_azure_BOLD_FG}xx                 $_colorEnd"
          "$_azure_BOLD_FG    x$_blue_BOLD_FG;;;:;;;;${_azure_BOLD_FG}xx                $_colorEnd"
          "$_azure_BOLD_FG    x$_blue_BOLD_FG;:;;:;:;;${_azure_BOLD_FG}xx               $_colorEnd"
          "$_azure_BOLD_FG    x$_blue_BOLD_FG;;:;;:;:;;;${_azure_BOLD_FG}xx             $_colorEnd"
          "$_azure_BOLD_FG    x$_blue_BOLD_FG;:;:.;;;:;:;;;${_azure_BOLD_FG}xx          $_colorEnd"
          "$_grey_BOLD_FG      =======$_blue_BOLD_FG ;;:;;;;;;;${_azure_BOLD_FG}xxxxx  $_colorEnd"
          "$_grey_BOLD_FG     =$_white_BOLD_FG:.:.:.:$_grey_BOLD_FG====$_blue_BOLD_FG  :;:;:;;${_azure_BOLD_FG}xx   $_colorEnd"
          "$_grey_BOLD_FG   ==$_white_BOLD_FG.:.:.:..:.:.$_grey_BOLD_FG==$_blue_BOLD_FG ;;:;;${_azure_BOLD_FG}x     $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG:.:.:.:.:.:.:.:$_grey_BOLD_FG=$_azure_BOLD_FG ;xxx       $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG.:.:.:.:.:.:.:$_grey_BOLD_FG==            $_colorEnd"
          "$_grey_BOLD_FG    ============               $_colorEnd")
    fi
}

# between 40% and 70% cloud cover
function mostlyCloudy()
{
    if [ $_dayTime = 'true' ]; then
    _out=("$_yellow_BOLD_FG               *               $_colorEnd"
          "$_yellow_BOLD_FG              ***              $_colorEnd"
          "$_yellow_BOLD_FG       ***   *****   ***       $_colorEnd"
          "$_yellow_BOLD_FG        ***************        $_colorEnd"
          "$_yellow_BOLD_FG        ***$_orange_BOLD_FG  -=-=-$_yellow_BOLD_FG  ***        $_colorEnd"
          "$_grey_BOLD_FG       ====$_orange_BOLD_FG -=-=-=-=-$_yellow_BOLD_FG *******  $_colorEnd"
          "$_grey_BOLD_FG     ==$_white_BOLD_FG::::::$_grey_BOLD_FG===$_orange_BOLD_FG -=-=-$_yellow_BOLD_FG ****    $_colorEnd"
          "$_grey_BOLD_FG   ==$_white_BOLD_FG:.:.:.:.::$_grey_BOLD_FG =$_orange_BOLD_FG --=-$_yellow_BOLD_FG *       $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG:.::.:.:.:$_grey_BOLD_FG ==$_white_BOLD_FG:::$_grey_BOLD_FG==$_yellow_BOLD_FG *****    $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG:.:.$_grey_BOLD_FG =====$_white_BOLD_FG.::.:.::$_grey_BOLD_FG==$_yellow_BOLD_FG  ****  $_colorEnd"
          "$_grey_BOLD_FG      ==$_white_BOLD_FG-::.::.::.:.::$_grey_BOLD_FG====     $_colorEnd"
          "$_grey_BOLD_FG    =$_white_BOLD_FG.:.:.:.:.:.:.::.:.:::$_grey_BOLD_FG=    $_colorEnd"
          "$_grey_BOLD_FG    =$_white_BOLD_FG:.:.:.:.:.:.:.::.:.::$_grey_BOLD_FG==   $_colorEnd"
          "$_grey_BOLD_FG    =$_white_BOLD_FG::.:.:.:.:.:.:.:.::.:$_grey_BOLD_FG=    $_colorEnd"
          "$_grey_BOLD_FG      ===================      $_colorEnd")
    else
    _out=("$_azure_BOLD_FG                x              $_colorEnd"
          "$_azure_BOLD_FG             xx$_blue_BOLD_FG;${_azure_BOLD_FG}x              $_colorEnd"
          "$_azure_BOLD_FG           :x$_blue_BOLD_FG;;:${_azure_BOLD_FG}x              $_colorEnd"
          "$_azure_BOLD_FG          .x$_blue_BOLD_FG;:;;${_azure_BOLD_FG}x+             $_colorEnd"
          "$_azure_BOLD_FG          x$_blue_BOLD_FG;;;:;;${_azure_BOLD_FG}x             $_colorEnd"
          "$_grey_BOLD_FG       :===$_blue_BOLD_FG  :;:;;${_azure_BOLD_FG}xx           $_colorEnd"
          "$_grey_BOLD_FG     ==$_white_BOLD_FG:.:.:$_grey_BOLD_FG==$_blue_BOLD_FG ;;:;;;${_azure_BOLD_FG}xx        $_colorEnd"
          "$_grey_BOLD_FG    =$_white_BOLD_FG..:.:.:.:.:$_grey_BOLD_FG=$_blue_BOLD_FG ;:;;;;;;$_azure_BOLD_FG++x  $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG::.:.:.:.$_grey_BOLD_FG  :===$_blue_BOLD_FG  ;:;:;:${_azure_BOLD_FG}xx   $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG.:.:$_grey_BOLD_FG  ====$_white_BOLD_FG:.:.:.$_grey_BOLD_FG==$_azure_BOLD_FG ;xxx     $_colorEnd"
          "$_grey_BOLD_FG   ==  ==$_white_BOLD_FG:.:..:.:.:.$_grey_BOLD_FG===        $_colorEnd"
          "$_grey_BOLD_FG    ==$_white_BOLD_FG:.:.:.:.:.:.:.:.:.$_grey_BOLD_FG=      $_colorEnd"
          "$_grey_BOLD_FG   ==$_white_BOLD_FG.:..:.:.:.:.:.:.:.:$_grey_BOLD_FG==     $_colorEnd"
          "$_grey_BOLD_FG    =$_white_BOLD_FG:.:.:..:.:.:.:.:.:.$_grey_BOLD_FG=      $_colorEnd"
          "$_grey_BOLD_FG      =================        $_colorEnd")
    fi
}

# greater than 70% cloud cover
function cloudy()
{
    _out=("$_grey_BOLD_FG              ==$_white_BOLD_FG::$_grey_BOLD_FG==           $_colorEnd"
          "$_grey_BOLD_FG         =====$_white_BOLD_FG:.:.:.:$_grey_BOLD_FG==        $_colorEnd"
          "$_grey_BOLD_FG       =$_white_BOLD_FG:.:.:.:.:.:.:.$_grey_BOLD_FG==       $_colorEnd"
          "$_grey_BOLD_FG    ====$_white_BOLD_FG.:.:.:.:.:.:.:.:.:$_grey_BOLD_FG==   $_colorEnd"
          "$_grey_BOLD_FG  ==$_white_BOLD_FG:.:.:.:.:.:.:.:.:.:.:.:.$_grey_BOLD_FG=  $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG.:.:.:.:..:.:.:.:.:.:.:.:$_grey_BOLD_FG=  $_colorEnd"
          "$_grey_BOLD_FG  =$_white_BOLD_FG:.:.:.:.:.:.:.:.:.:.:.:.$_grey_BOLD_FG==  $_colorEnd"
          "$_grey_BOLD_FG   ========================    $_colorEnd"
          "                               "
          "                               "
          "                               "
          "                               "
          "                               "
          "                               "
          "                               ")
}

## SCRIPT ENTRYPOINT:
while getopts 'vh' _opt;
do
    case "$_opt" in
        v)
            _logo=( "           ;;;;;;;;    ..     ..   "
                    "         ;;........;;  ..   ..     "
                    "        ;;..........:; .. ..       "
                    "    ;;;;;;:..........;    ..:.:..: "
                    "  ;;.......;:.......;;;;;;         "
                    " ;;................;;.....:;;      "
                    " ;:.........................:;     "
                    " :;.........................:;     "
                    "   ;;:...................:;;;      "
                    "   ++       -+      ++             "
                    "  ++       -+      ++              ")
            echo ""
            _appInfo=$(figlet -f slant "Climafetch Version $_version")
            paste <(printf "%s\n" "${_logo[@]}") <(printf "$_appInfo") | lolcat
            exit
            ;;
        h)
            ;&
        *)
            echo -en "$_green_BOLD_FG"
            figlet -c "Climafetch $_version help page"
            echo -e "climafetch $_azure_BOLD_FG[-v]$_colorEnd $_orange_BOLD_FG[-h]$_colorEnd"
            echo -e "  $_azure_BOLD_FG [-v]$_colorEnd show version"
            echo -e "  $_orange_BOLD_FG [-h]$_colorEnd show this help page"
            echo -e "$_green_BOLD_FG"
            echo -e "example:$_colorEnd  get current climate conditions"
            echo -e "climafetch"
            exit
    esac
done

# get current date with "date" cmd and store in variable
_fullDate=$(date '+%A %B %d, %Y')
echo "Gathering todays weather report $_fullDate"

# create tmp file and setup clean up on exit
_tmpFile=$(mktemp)
trap 'rm -f $_tmpFile' EXIT

# start "inxi" cmd in background to get weather
# pipe output to tee command to write to tmp file
# remove stdout
inxi -xxxw | tee "$_tmpFile" >/dev/null &

# save PID and setup kill signal handling
_inxiPID=$!
trap 'kill $_inxiPID' SIGINT
echo "Starting inxi weather process $_inxiPID"

# turn cursor shape to steady underline
echo -ne "\e[4 q"

# while waiting for inxi cmd to exit, play ASCII animation
while ps -p $_inxiPID >/dev/null;
do
    echo -en "-\b"
    sleep 0.1
    echo -en "\\\\\b"
    sleep 0.1
    echo -en "|\b"
    sleep 0.1
    echo -en "/\b"
    sleep 0.1
    echo -en "-\b"
    sleep 0.1
    echo -en "\\\\\b"
    sleep 0.1
    echo -en "|\b"
    sleep 0.1
    echo -en "/\b"
    sleep 0.1
    echo -en "-\b"
    sleep 0.1
    echo -en "*"
done
# restore cursor shape back to default
echo -ne "\e[0 q"

echo -e "          $_green_BOLD_FG Finished Success! $_colorEnd \n"

# read inxi weather results from tmpFile, deliminate on spaces
mapfile -d ' ' _inxiRaw < "$_tmpFile"

# remove extra whitespaces and newlines
_inxiPretty=()
for _i in "${_inxiRaw[@]}"
do
    _line="$(echo "$_i" | xargs)"
    if [[ $_line != "" ]]; then
        _inxiPretty+=("$_line")
    fi
done

# debug code to see array of weather output
#for _i in "${!_inxiPretty[@]}"
#do
#    echo "$_i ${_inxiPretty[_i]}"
#done

# create arrays to hold catagories of inxi weather output
_temperature=()
_conditions=()
_wind=()
_cloudCover=()
_humidity=()
_pressure=()
_locale=()
_currentTime=()
_observationTime=()
_sunrise=()
_sunset=()
_source=()

_set=""

# split weather output array into catagories
for _i in "${!_inxiPretty[@]}"
do
    case ${_inxiPretty[_i]} in
        "temperature:")
            _set="temperature"
        ;;
        "conditions:")
            _set="conditions"
        ;;
        "wind:")
            _set="wind"
        ;;
        "cloud")
            _set="cloudCover"
        ;;
        "humidity:")
            _set="humidity"
        ;;
        "pressure:")
            _set="pressure"
        ;;
        "Locale:")
            _set="locale"
        ;;
        "current")
            _set="currentTime"
        ;;
        "observation")
            _set="observationTime"
        ;;
        "sunrise:")
            _set="sunrise"
        ;;
        "sunset:")
            _set="sunset"
        ;;
        "Source:")
            _set="source"
        ;;
    esac
    case ${_set} in
        "temperature")
            _temperature+=("${_inxiPretty[_i]}")
        ;;
        "conditions")
            _conditions+=("${_inxiPretty[_i]}")
        ;;
        "wind")
            _wind+=("${_inxiPretty[_i]}")
        ;;
        "cloudCover")
            _cloudCover+=("${_inxiPretty[_i]}")
        ;;
        "humidity")
            _humidity+=("${_inxiPretty[_i]}")
        ;;
        "pressure")
            _pressure+=("${_inxiPretty[_i]}")
        ;;
        "locale")
            _locale+=("${_inxiPretty[_i]}")
        ;;
        "currentTime")
            _currentTime+=("${_inxiPretty[_i]}")
        ;;
        "observationTime")
            _observationTime+=("${_inxiPretty[_i]}")
        ;;
        "sunrise")
            _sunrise+=("${_inxiPretty[_i]}")
        ;;
        "sunset")
            _sunset+=("${_inxiPretty[_i]}")
        ;;
        "source")
            _source+=("${_inxiPretty[_i]}")
        ;;
    esac
done

# determine if it is daytime or nighttime based on returned
# sunrise and sunset times
if [ "$(date +%s)" -ge "$(date -d "${_sunrise[1]}" +%s)" ] && [ "$(date +%s)" -le "$(date -d "${_sunset[1]}" +%s)" ]; then
    _dayTime=true
else
    _dayTime=false
fi

# few clouds
# scattered clouds
# broken clouds
# overcast clouds

# drizzle
# drizzle rain
# light intensity drizzle
# heavy intensity drizzle
# light intensity drizzle rain
# heavy intensity drizzle rain
# shower drizzle
# shower rain and drizzle
# heavy shower rain and drizzle

# rain
# light rain
# moderate rain
# heavy intensity rain
# very heavy rain
# extreme rain
# freezing rain
# shower rain
# light intensity shower rain
# heavy intensity shower rain
# ragged shower rain

# thunderstorm
# light thunderstorm
# heavy thunderstorm
# ragged thunderstorm
# thunderstorm with rain
# thunderstorm with light rain
# thunderstorm with heavy rain
# thunderstorm with drizzle
# thunderstorm with light drizzle
# thunderstorm with heavy drizzle

# snow
# light snow
# heavy snow
# rain and snow
# light rain and snow
# shower snow
# light shower snow
# heavy shower snow
# sleet
# shower sleet
# light shower sleet

# mist
# smoke
# haze
# sand/dust whirls
# fog
# sand
# dust
# volcanic ash
# squalls
# tornado

# basic logic to pick correct weather icon image
# from the current weather conditions from inxi
# clear sky
_conditionsStr=${_conditions[*]:1}
case ${_conditionsStr} in
    "clear sky")
        clear
    ;;
    "few clouds" | "scattered clouds")
        partlyCloudy
    ;;
    "broken clouds")
        mostlyCloudy
    ;;
    "overcast clouds")
        cloudy
    ;;
esac

# debug code to test all weather conditions combinations
# uncomment desired lines
#_dayTime=true
#_dayTime=false
clear
colorizeArray _out
#partlyCloudy
#mostlyCloudy
#cloudy

# print out the final results
echo -e "${_out[0]}  $_green_BOLD_FG${_inxiPretty[0]}$_colorEnd ${_inxiPretty[1]}"
echo -e "${_out[1]}  ----------------"
echo -e "${_out[2]}  $_green_BOLD_FG${_temperature[0]}$_colorEnd ${_temperature[3]} ${_temperature[4]}"
echo -e "${_out[3]}  $_green_BOLD_FG${_conditions[0]}$_colorEnd ${_conditions[*]:1}"
echo -e "${_out[4]}  $_green_BOLD_FG${_wind[0]}$_colorEnd ${_wind[1]} ${_wind[2]} ${_wind[3]} ${_wind[8]} ${_wind[9]}"
echo -e "${_out[5]}  $_green_BOLD_FG${_cloudCover[0]} ${_cloudCover[1]}$_colorEnd ${_cloudCover[*]:2}"
echo -e "${_out[6]}  $_green_BOLD_FG${_humidity[0]}$_colorEnd ${_humidity[*]:1}"
echo -e "${_out[7]}  $_green_BOLD_FG${_pressure[0]}$_colorEnd ${_pressure[3]} ${_pressure[4]}"
echo -e "${_out[8]}  $_green_BOLD_FG${_locale[0]}$_colorEnd ${_locale[*]:1}"
echo -e "${_out[9]}  $_green_BOLD_FG${_currentTime[0]} ${_currentTime[1]}$_colorEnd ${_currentTime[*]:2}"
echo -e "${_out[10]}  $_green_BOLD_FG${_observationTime[0]} ${_observationTime[1]}$_colorEnd ${_observationTime[*]:2}"
echo -e "${_out[11]}  $_green_BOLD_FG${_sunrise[0]}$_colorEnd ${_sunrise[*]:1}"
echo -e "${_out[12]}  $_green_BOLD_FG${_sunset[0]}$_colorEnd ${_sunset[*]:1}"
echo -e "${_out[13]}  $_green_BOLD_FG${_source[0]}$_colorEnd ${_source[*]:1}"
echo -e "${_out[14]}"
echo -e "${_out[15]}"
